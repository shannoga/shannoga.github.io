---
layout: post
title:  "infinite recursion"
subtitle: "never access a getter of a property from within itself"
date:   2015-01-16 22:41:57
categories: mistake objective-c xcode
---

One of the most common mistakes that is easy to understand and fix is calling a property from it's own getter.

Let's say we have a string property called `name`  

{% highlight objective-c %}
@property (nonatomic, copy) NSString * name;
{% endhighlight %}

Since this is a persons name, every time we access this property we want to capitalise it, so we use the getter to do that -

{% highlight objective-c %}
- (NSString *)name
{
    NSString *capitalizedName = [self.name capitalizedString];
    return capitalizedName;
}
{% endhighlight %}

And lastly somewhere in our code we access the `name` property -

{% highlight objective-c %}
NSString *nameText = [NSString stringWithFormat:@"Hello %@",self.name];
{% endhighlight %}

Running the app will cause xCode to stuck for a few seconds and then we will crash.

***What happened?***

What we did is created an `infinite recursion` that caused a [Stack overflow][link-1], and simpler - We just created a method that calls itself again and again and again and again.............and again...

***How did it happen?***

When we wanted to access the `name` property, we called 
{% highlight objective-c %} 
self.name
{% endhighlight %} 

The compiler then "went" to get the `name` from the getter.
{% highlight objective-c %}
- (NSString *)name;
{% endhighlight %}

inside the getter, it got to the first line which states - 
{% highlight objective-c %} 
NSString *capitalizedName = [self.name capitalizedString];
{% endhighlight %} 

It read trough the first line joyfully and right after the `NSString *capitalizedName =` it got to this chunk of code - 
{% highlight objective-c %} 
self.name 
{% endhighlight %} 

So it "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and "went" back to the beginning of the `name` getter and read it again until it read `self.name` and did it again and again and again.... 



**How to avoid it ?**

The fix is simple, all we need to do it to prevent the getter to call itself. We can do that by using the iVar instead of useing the property -

{% highlight objective-c %}
- (NSString *)name
{
    NSString *capitalizedName = [_name capitalizedString];
    return capitalizedName;
}
{% endhighlight %}

Using the iVar the compiler will not access the getter.

***Last notes***

This `infinite recursion` can happen when calling a method from within itself, but this is more obvious usually. 

{% highlight objective-c %} 
- (void)callMe
{
    [self callMe];
}
{% endhighlight %}

A common scenario where we can fall this pit is when lazy loading a property -

{% highlight objective-c %} 
@property (nonatomic, strong) NSArray *list;

- (NSArray *)list
{
   if (!self.list)
   {
        self.list = @[@"1",@"2",@"3",@"4"];
   }
   return self.list;
}
{% endhighlight %}

While it should be -

{% highlight objective-c %} 
@property (nonatomic, strong) NSArray *list;

- (NSArray *)list
{
   if (_self.list)
   {
      _list = @[@"1",@"2",@"3",@"4"];
   }
   return _list;
}
{% endhighlight %}



[link-1]: http://en.wikipedia.org/wiki/Stack_overflow 